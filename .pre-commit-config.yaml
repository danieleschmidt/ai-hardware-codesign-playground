# Pre-commit hooks for AI Hardware Co-Design Playground
# See https://pre-commit.com for more information

repos:
  # Built-in hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
        args: ['--unsafe']
      - id: check-json
      - id: check-toml
      - id: check-xml
      - id: check-added-large-files
        args: ['--maxkb=10000']
      - id: check-case-conflict
      - id: check-merge-conflict
      - id: check-symlinks
      - id: check-executables-have-shebangs
      - id: check-shebang-scripts-are-executable
      - id: detect-private-key
      - id: detect-aws-credentials
      - id: mixed-line-ending
      - id: name-tests-test
        args: ['--pytest-test-first']
      - id: requirements-txt-fixer
      - id: sort-simple-yaml
      - id: file-contents-sorter

  # Python code formatting
  - repo: https://github.com/psf/black
    rev: 23.12.1
    hooks:
      - id: black
        language_version: python3
        args: ['--config=pyproject.toml']

  # Python import sorting
  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        args: ['--profile=black', '--line-length=88']

  # Python linting and formatting
  - repo: https://github.com/charliermarsh/ruff-pre-commit
    rev: v0.1.9
    hooks:
      - id: ruff
        args: ['--fix', '--config=pyproject.toml']
      - id: ruff-format
        args: ['--config=pyproject.toml']

  # Python type checking
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.8.0
    hooks:
      - id: mypy
        additional_dependencies: [
          'types-PyYAML',
          'types-requests',
          'types-setuptools',
          'pydantic',
          'numpy',
          'pandas-stubs'
        ]
        args: ['--config-file=pyproject.toml']

  # Security scanning
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.6
    hooks:
      - id: bandit
        args: ['-c', 'pyproject.toml']
        additional_dependencies: ['bandit[toml]']

  # Python docstring formatting
  - repo: https://github.com/pycqa/pydocstyle
    rev: 6.3.0
    hooks:
      - id: pydocstyle
        args: ['--convention=google']

  # YAML/JSON/TOML linting
  - repo: https://github.com/adrienverge/yamllint
    rev: v1.33.0
    hooks:
      - id: yamllint
        args: ['-d', 'relaxed']

  # Shell script linting
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.6
    hooks:
      - id: shellcheck
        args: ['--severity=warning']

  # Dockerfile linting
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint
        args: ['--ignore', 'DL3008', '--ignore', 'DL3009']

  # Markdown linting
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.39.0
    hooks:
      - id: markdownlint
        args: ['--fix']

  # License headers
  - repo: https://github.com/Lucas-C/pre-commit-hooks
    rev: v1.5.4
    hooks:
      - id: insert-license
        files: \.py$
        args:
          - --license-filepath
          - LICENSE_HEADER.txt
          - --comment-style
          - '#'

  # Jupyter notebook cleaning
  - repo: https://github.com/nbQA-dev/nbQA
    rev: 1.7.1
    hooks:
      - id: nbqa-black
      - id: nbqa-isort
      - id: nbqa-ruff

  # Jupyter notebook output clearing
  - repo: https://github.com/kynan/nbstripout
    rev: 0.6.1
    hooks:
      - id: nbstripout

  # Git conventional commits
  - repo: https://github.com/compilerla/conventional-pre-commit
    rev: v3.0.0
    hooks:
      - id: conventional-pre-commit
        stages: [commit-msg]

  # Secrets detection
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        args: ['--baseline', '.secrets.baseline']

  # Check for merge conflicts in specific files
  - repo: local
    hooks:
      - id: check-no-merge-conflict-markers
        name: Check for merge conflict markers
        entry: bash -c 'git diff --check'
        language: system
        pass_filenames: false
        always_run: true

  # Custom hook for hardware files
  - repo: local
    hooks:
      - id: verilog-lint
        name: Verilog/SystemVerilog linting
        entry: bash -c 'find . -name "*.v" -o -name "*.sv" | head -10 | xargs -r verilator --lint-only --Wall 2>/dev/null || true'
        language: system
        files: \.(v|sv)$
        pass_filenames: false

  # Documentation generation
  - repo: local
    hooks:
      - id: update-readme-toc
        name: Update README table of contents
        entry: bash -c 'which markdown-toc >/dev/null 2>&1 && markdown-toc -i README.md || true'
        language: system
        files: README\.md$
        pass_filenames: false

# Pre-commit configuration
default_stages: [commit]
fail_fast: true
minimum_pre_commit_version: '3.0.0'

# CI configuration
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: []
  submodules: false