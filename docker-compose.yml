version: '3.8'

services:
  # =============================================================================
  # Main Application Service
  # =============================================================================
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: codesign-playground-app
    ports:
      - "8000:8000"
      - "8888:8888"  # Jupyter
      - "6006:6006"  # TensorBoard
    volumes:
      - .:/app
      - /var/run/docker.sock:/var/run/docker.sock  # For Docker-in-Docker
      - app_data:/app/data
      - app_models:/app/models
      - app_outputs:/app/outputs
    environment:
      - CODESIGN_PLAYGROUND_DEV=true
      - DATABASE_URL=postgresql://postgres:password@db:5432/codesign_playground
      - REDIS_URL=redis://redis:6379/0
      - PYTHONPATH=/app/src
    depends_on:
      - db
      - redis
    networks:
      - codesign-network
    restart: unless-stopped

  # =============================================================================
  # Database Service
  # =============================================================================
  db:
    image: postgres:15-alpine
    container_name: codesign-playground-db
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: codesign_playground
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - codesign-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # Redis Cache Service
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: codesign-playground-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - codesign-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # Jupyter Lab Service
  # =============================================================================
  jupyter:
    build:
      context: .
      dockerfile: Dockerfile
      target: jupyter
    container_name: codesign-playground-jupyter
    ports:
      - "8889:8888"
    volumes:
      - .:/app
      - jupyter_data:/home/appuser/.jupyter
      - app_data:/app/data
      - app_models:/app/models
      - app_outputs:/app/outputs
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=codesign-playground
      - PYTHONPATH=/app/src
    networks:
      - codesign-network
    restart: unless-stopped

  # =============================================================================
  # Web Dashboard Service
  # =============================================================================
  web:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: codesign-playground-web
    ports:
      - "3000:3000"
    volumes:
      - app_outputs:/app/outputs:ro
    environment:
      - NODE_ENV=development
      - API_URL=http://app:8000
    depends_on:
      - app
    networks:
      - codesign-network
    restart: unless-stopped

  # =============================================================================
  # Monitoring Services
  # =============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: codesign-playground-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - codesign-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: codesign-playground-grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    networks:
      - codesign-network
    restart: unless-stopped

  # =============================================================================
  # Development Tools
  # =============================================================================
  mailhog:
    image: mailhog/mailhog:latest
    container_name: codesign-playground-mailhog
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - codesign-network
    restart: unless-stopped

  # =============================================================================
  # Testing Service
  # =============================================================================
  test:
    build:
      context: .
      dockerfile: Dockerfile
      target: testing
    container_name: codesign-playground-test
    volumes:
      - .:/app
      - test_reports:/app/reports
    environment:
      - PYTEST_CURRENT_TEST=true
      - DATABASE_URL=postgresql://postgres:password@db:5432/codesign_playground_test
      - REDIS_URL=redis://redis:6379/1
    depends_on:
      - db
      - redis
    networks:
      - codesign-network
    profiles:
      - testing

  # =============================================================================
  # GPU-enabled Service (requires nvidia-docker)
  # =============================================================================
  gpu:
    build:
      context: .
      dockerfile: Dockerfile
      target: gpu
    container_name: codesign-playground-gpu
    runtime: nvidia
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - CUDA_VISIBLE_DEVICES=0
    volumes:
      - .:/app
      - app_models:/app/models
      - app_outputs:/app/outputs
    depends_on:
      - db
      - redis
    networks:
      - codesign-network
    profiles:
      - gpu

  # =============================================================================
  # Documentation Service
  # =============================================================================
  docs:
    build:
      context: .
      dockerfile: Dockerfile
      target: docs
    container_name: codesign-playground-docs
    ports:
      - "8080:8000"
    volumes:
      - ./docs:/app/docs
      - docs_build:/app/site
    command: mkdocs serve --dev-addr=0.0.0.0:8000
    networks:
      - codesign-network
    profiles:
      - docs

# =============================================================================
# Networks
# =============================================================================
networks:
  codesign-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =============================================================================
# Volumes
# =============================================================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_data:
    driver: local
  app_models:
    driver: local
  app_outputs:
    driver: local
  jupyter_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  test_reports:
    driver: local
  docs_build:
    driver: local