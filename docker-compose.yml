# Docker Compose for AI Hardware Co-Design Playground - Production
version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: codesign-db
    environment:
      POSTGRES_DB: codesign_playground
      POSTGRES_USER: codesign_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-codesign_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U codesign_user -d codesign_playground"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - codesign-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: codesign-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - codesign-network

  # Backend API
  backend:
    build:
      context: .
      target: backend-production
      args:
        - BUILD_ENV=production
    container_name: codesign-backend
    environment:
      - DATABASE_URL=postgresql://codesign_user:${DB_PASSWORD:-codesign_password}@database:5432/codesign_playground
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - CORS_ORIGINS=https://your-domain.com
    ports:
      - "8000:8000"
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./generated:/app/generated
    networks:
      - codesign-network

  # Frontend (Nginx + React)
  frontend:
    build:
      context: .
      target: frontend-nginx
      args:
        - BUILD_ENV=production
    container_name: codesign-frontend
    environment:
      - REACT_APP_API_URL=http://backend:8000
      - REACT_APP_ENVIRONMENT=production
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    restart: unless-stopped
    networks:
      - codesign-network

  # Celery Worker
  worker:
    build:
      context: .
      target: backend-production
    container_name: codesign-worker
    command: celery -A codesign_playground.worker worker --loglevel=info --concurrency=4
    environment:
      - DATABASE_URL=postgresql://codesign_user:${DB_PASSWORD:-codesign_password}@database:5432/codesign_playground
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./generated:/app/generated
    restart: unless-stopped
    networks:
      - codesign-network

  # Celery Beat (Scheduler)
  scheduler:
    build:
      context: .
      target: backend-production
    container_name: codesign-scheduler
    command: celery -A codesign_playground.worker beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    environment:
      - DATABASE_URL=postgresql://codesign_user:${DB_PASSWORD:-codesign_password}@database:5432/codesign_playground
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - codesign-network

  # Flower (Celery Monitoring)
  flower:
    build:
      context: .
      target: backend-production
    container_name: codesign-flower
    command: celery -A codesign_playground.worker flower --port=5555
    environment:
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      - FLOWER_BASIC_AUTH=${FLOWER_USER:-admin}:${FLOWER_PASSWORD:-flower_password}
    ports:
      - "5555:5555"
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - codesign-network

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: codesign-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    restart: unless-stopped
    networks:
      - codesign-network

  # Grafana (Dashboards)
  grafana:
    image: grafana/grafana:latest
    container_name: codesign-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-grafana_password}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - codesign-network

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Custom network
networks:
  codesign-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16