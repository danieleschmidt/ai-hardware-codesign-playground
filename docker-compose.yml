version: '3.8'

services:
  # AI Hardware Co-Design Playground Backend API
  api:
    build:
      context: .
      dockerfile: backend/Dockerfile
      target: production
    container_name: codesign-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - LOG_LEVEL=INFO
      - WORKERS=4
      - MAX_REQUESTS=1000
      - MAX_REQUESTS_JITTER=50
      - TIMEOUT=120
      - KEEPALIVE=2
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://codesign:${POSTGRES_PASSWORD}@postgres:5432/codesign_playground
      - MONITORING_ENABLED=true
      - METRICS_PORT=9090
      - HEALTH_CHECK_INTERVAL=30
    volumes:
      - ./data/models:/app/data/models:ro
      - ./data/cache:/app/data/cache
      - ./logs:/app/logs
      - /tmp:/tmp
    depends_on:
      - postgres
      - redis
    networks:
      - codesign-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  # Frontend Web Application
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
      target: production
    container_name: codesign-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=http://api:8000
      - REACT_APP_WS_URL=ws://api:8000/ws
      - GENERATE_SOURCEMAP=false
    volumes:
      - ./frontend/public:/app/public:ro
    depends_on:
      - api
    networks:
      - codesign-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: codesign-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=codesign_playground
      - POSTGRES_USER=codesign
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS="--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
      - ./database/backups:/backups
    networks:
      - codesign-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U codesign -d codesign_playground"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Redis Cache and Session Store
  redis:
    image: redis:7-alpine
    container_name: codesign-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - codesign-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 512M

  # Nginx Reverse Proxy and Load Balancer
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: codesign-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    environment:
      - DOMAIN=${DOMAIN:-localhost}
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - api
      - frontend
    networks:
      - codesign-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  codesign-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16