name: Compliance & Governance

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 4 * * 0'  # Weekly Sunday at 4 AM UTC
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  checks: write

jobs:
  license-compliance:
    name: License Compliance Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install license checker
        run: |
          pip install pip-licenses licensecheck
      - name: Check Python licenses
        run: |
          pip install -e .[all]
          pip-licenses --format=json --output-file=python-licenses.json
          pip-licenses --format=plain-vertical --allowed-only --fail-on-forbidden
      - name: Check Node.js licenses
        if: hashFiles('package.json') != ''
        run: |
          npm install -g license-checker
          license-checker --json --out nodejs-licenses.json
          license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC'
      - name: Upload license reports
        uses: actions/upload-artifact@v3
        with:
          name: license-reports
          path: |
            python-licenses.json
            nodejs-licenses.json

  dependency-audit:
    name: Dependency Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install audit tools
        run: |
          pip install pip-audit cyclonedx-bom
      - name: Run Python dependency audit
        run: |
          pip install -e .[all]
          pip-audit --format=json --output=python-audit.json
      - name: Generate Python SBOM
        run: |
          cyclonedx-py -o python-sbom.json
      - name: Run npm audit
        if: hashFiles('package.json') != ''
        run: |
          npm audit --audit-level=moderate --json > npm-audit.json || true
      - name: Upload audit reports
        uses: actions/upload-artifact@v3
        with:
          name: dependency-audit
          path: |
            python-audit.json
            python-sbom.json
            npm-audit.json

  policy-validation:
    name: Policy as Code Validation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Open Policy Agent
        run: |
          curl -L -o opa https://openpolicyagent.org/downloads/v0.58.0/opa_linux_amd64_static
          chmod +x opa
          sudo mv opa /usr/local/bin/
      - name: Validate policies
        run: |
          if [ -d "policies/" ]; then
            opa fmt --diff policies/
            opa test policies/
          fi
      - name: Run container policy checks
        if: hashFiles('Dockerfile') != ''
        run: |
          docker run --rm -v $(pwd):/workspace \
            openpolicyagent/conftest verify --policy policies/docker.rego Dockerfile

  supply-chain-security:
    name: Supply Chain Security
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Generate SLSA provenance
        uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.9.0
        with:
          base64-subjects: "${{ needs.build.outputs.hashes }}"
      - name: Verify SLSA provenance
        run: |
          curl -sSL https://github.com/slsa-framework/slsa-verifier/releases/download/v2.4.1/slsa-verifier-linux-amd64 -o slsa-verifier
          chmod +x slsa-verifier
          ./slsa-verifier verify-artifact --provenance-path provenance.intoto.jsonl --source-uri github.com/${{ github.repository }}

  data-privacy-scan:
    name: Data Privacy Compliance
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Scan for PII/sensitive data
        run: |
          # Install whispers for static analysis of secrets/PII
          pip install whispers
          whispers --config .whispers.yml --output whispers-report.json .
      - name: Check GDPR compliance patterns
        run: |
          # Search for data processing patterns that need GDPR consideration
          grep -r "personal.*data\|email\|phone\|address" --include="*.py" --include="*.js" . > gdpr-patterns.txt || true
      - name: Upload privacy scan results
        uses: actions/upload-artifact@v3
        with:
          name: privacy-scan
          path: |
            whispers-report.json
            gdpr-patterns.txt

  architecture-compliance:
    name: Architecture Decision Records
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Validate ADR structure
        run: |
          # Check that ADRs follow the required template
          for adr in docs/adr/*.md; do
            if [ -f "$adr" ]; then
              echo "Validating $adr"
              grep -q "# ADR-" "$adr" || (echo "Missing ADR header in $adr" && exit 1)
              grep -q "## Status" "$adr" || (echo "Missing Status section in $adr" && exit 1)
              grep -q "## Context" "$adr" || (echo "Missing Context section in $adr" && exit 1)
              grep -q "## Decision" "$adr" || (echo "Missing Decision section in $adr" && exit 1)
              grep -q "## Consequences" "$adr" || (echo "Missing Consequences section in $adr" && exit 1)
            fi
          done
      - name: Generate architecture overview
        run: |
          # Create architecture compliance report
          echo "# Architecture Compliance Report" > architecture-report.md
          echo "Generated on: $(date)" >> architecture-report.md
          echo "" >> architecture-report.md
          echo "## Architecture Decision Records" >> architecture-report.md
          ls docs/adr/*.md | wc -l | xargs echo "Total ADRs:" >> architecture-report.md
      - name: Upload architecture report
        uses: actions/upload-artifact@v3
        with:
          name: architecture-compliance
          path: architecture-report.md

  compliance-reporting:
    name: Generate Compliance Report
    needs: [license-compliance, dependency-audit, policy-validation, supply-chain-security, data-privacy-scan, architecture-compliance]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: actions/checkout@v4
      - name: Download all artifacts
        uses: actions/download-artifact@v3
      - name: Generate comprehensive compliance report
        run: |
          mkdir -p compliance-reports
          echo "# Compliance Report - $(date)" > compliance-reports/compliance-summary.md
          echo "" >> compliance-reports/compliance-summary.md
          
          echo "## License Compliance" >> compliance-reports/compliance-summary.md
          if [ -f license-reports/python-licenses.json ]; then
            echo "✅ Python license compliance checked" >> compliance-reports/compliance-summary.md
          fi
          
          echo "## Security Audit" >> compliance-reports/compliance-summary.md
          if [ -f dependency-audit/python-audit.json ]; then
            echo "✅ Dependency security audit completed" >> compliance-reports/compliance-summary.md
          fi
          
          echo "## Supply Chain Security" >> compliance-reports/compliance-summary.md
          echo "✅ SLSA provenance generated" >> compliance-reports/compliance-summary.md
          
          echo "## Data Privacy" >> compliance-reports/compliance-summary.md
          if [ -f privacy-scan/whispers-report.json ]; then
            echo "✅ Privacy scan completed" >> compliance-reports/compliance-summary.md
          fi
          
          echo "## Architecture Governance" >> compliance-reports/compliance-summary.md
          if [ -f architecture-compliance/architecture-report.md ]; then
            echo "✅ ADR validation passed" >> compliance-reports/compliance-summary.md
          fi
      - name: Upload compliance summary
        uses: actions/upload-artifact@v3
        with:
          name: compliance-summary
          path: compliance-reports/