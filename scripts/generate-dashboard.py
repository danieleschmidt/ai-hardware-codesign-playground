#!/usr/bin/env python3
"""
AI Hardware Co-Design Playground - Dashboard Generator
Generates interactive HTML dashboards from collected metrics
"""

import json
import argparse
import sys
import os
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Any, Optional
import logging

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class DashboardGenerator:
    """Generate interactive dashboards from repository metrics"""
    
    def __init__(self, metrics_file: str, output_dir: str = "dashboard"):
        self.metrics_file = Path(metrics_file)
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(exist_ok=True)
        self.metrics_data = self._load_metrics()
        
    def _load_metrics(self) -> Dict[str, Any]:
        """Load metrics from JSON file"""
        try:
            with open(self.metrics_file, 'r') as f:
                return json.load(f)
        except FileNotFoundError:
            logger.error(f"Metrics file not found: {self.metrics_file}")
            sys.exit(1)
        except json.JSONDecodeError as e:
            logger.error(f"Invalid JSON in metrics file: {e}")
            sys.exit(1)
            
    def generate_html_dashboard(self) -> str:
        """Generate main HTML dashboard"""
        html_content = f"""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Hardware Co-Design Playground - Dashboard</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        {self._get_css_styles()}
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>🚀 AI Hardware Co-Design Playground</h1>
            <h2>Repository Health Dashboard</h2>
            <p class="timestamp">Last Updated: {self.metrics_data.get('collectionTimestamp', 'Unknown')}</p>
        </header>
        
        <div class="overview">
            {self._generate_overview_cards()}
        </div>
        
        <div class="charts-grid">
            {self._generate_charts_section()}
        </div>
        
        <div class="metrics-tables">
            {self._generate_metrics_tables()}
        </div>
        
        <footer>
            <p>Generated by AI Hardware Co-Design Playground Dashboard Generator</p>
            <p>Repository: <a href="https://github.com/danieleschmidt/ai-hardware-codesign-playground">
                ai-hardware-codesign-playground</a></p>
        </footer>
    </div>
    
    <script>
        {self._generate_javascript()}
    </script>
</body>
</html>
"""
        return html_content
        
    def _get_css_styles(self) -> str:
        """Generate CSS styles for the dashboard"""
        return """
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: #333;
            min-height: 100vh;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        
        header {
            text-align: center;
            color: white;
            margin-bottom: 30px;
        }
        
        header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
        }
        
        header h2 {
            font-size: 1.5em;
            margin-bottom: 10px;
            opacity: 0.9;
        }
        
        .timestamp {
            opacity: 0.8;
            font-size: 0.9em;
        }
        
        .overview {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .metric-card {
            background: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            transition: transform 0.2s ease;
        }
        
        .metric-card:hover {
            transform: translateY(-5px);
        }
        
        .metric-card h3 {
            color: #667eea;
            margin-bottom: 10px;
            display: flex;
            align-items: center;
        }
        
        .metric-card .icon {
            font-size: 1.5em;
            margin-right: 10px;
        }
        
        .metric-value {
            font-size: 2em;
            font-weight: bold;
            color: #333;
        }
        
        .metric-trend {
            font-size: 0.9em;
            margin-top: 5px;
        }
        
        .trend-up { color: #4CAF50; }
        .trend-down { color: #f44336; }
        .trend-stable { color: #FF9800; }
        
        .charts-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .chart-container {
            background: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        
        .chart-container h3 {
            color: #667eea;
            margin-bottom: 20px;
            text-align: center;
        }
        
        .metrics-tables {
            background: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            margin-bottom: 30px;
        }
        
        .metrics-tables h3 {
            color: #667eea;
            margin-bottom: 20px;
        }
        
        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }
        
        th, td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        
        th {
            background-color: #f8f9fa;
            font-weight: 600;
            color: #333;
        }
        
        tr:hover {
            background-color: #f5f5f5;
        }
        
        footer {
            text-align: center;
            color: white;
            opacity: 0.8;
            margin-top: 30px;
        }
        
        footer a {
            color: white;
            text-decoration: none;
        }
        
        footer a:hover {
            text-decoration: underline;
        }
        
        .status-good { color: #4CAF50; font-weight: bold; }
        .status-warning { color: #FF9800; font-weight: bold; }
        .status-error { color: #f44336; font-weight: bold; }
        """
        
    def _generate_overview_cards(self) -> str:
        """Generate overview metric cards"""
        metrics = self.metrics_data.get('metrics', {})
        
        cards = []
        
        # Git metrics
        git_metrics = metrics.get('git', {})
        cards.append(f"""
        <div class="metric-card">
            <h3><span class="icon">📊</span>Git Activity</h3>
            <div class="metric-value">{git_metrics.get('commitsLastWeek', 0)}</div>
            <div class="metric-trend trend-up">Commits this week</div>
        </div>
        """)
        
        # Code quality
        code_quality = metrics.get('codeQuality', {})
        total_files = code_quality.get('pythonFiles', 0) + code_quality.get('jsFiles', 0)
        cards.append(f"""
        <div class="metric-card">
            <h3><span class="icon">📝</span>Code Base</h3>
            <div class="metric-value">{total_files}</div>
            <div class="metric-trend trend-stable">Total source files</div>
        </div>
        """)
        
        # Test coverage
        testing = metrics.get('testing', {})
        coverage = testing.get('coverage', 0)
        coverage_status = "trend-up" if coverage > 80 else "trend-warning" if coverage > 60 else "trend-down"
        cards.append(f"""
        <div class="metric-card">
            <h3><span class="icon">🧪</span>Test Coverage</h3>
            <div class="metric-value">{coverage:.1f}%</div>
            <div class="metric-trend {coverage_status}">Code coverage</div>
        </div>
        """)
        
        # Security
        security = metrics.get('security', {})
        vulnerabilities = security.get('vulnerabilities', 0)
        security_status = "trend-up" if vulnerabilities == 0 else "trend-down"
        security_text = "No vulnerabilities" if vulnerabilities == 0 else f"{vulnerabilities} vulnerabilities"
        cards.append(f"""
        <div class="metric-card">
            <h3><span class="icon">🔒</span>Security</h3>
            <div class="metric-value">{vulnerabilities}</div>
            <div class="metric-trend {security_status}">{security_text}</div>
        </div>
        """)
        
        # Performance
        performance = metrics.get('performance', {})
        response_time = performance.get('responseTime', 0)
        perf_status = "trend-up" if response_time < 200 else "trend-warning" if response_time < 500 else "trend-down"
        cards.append(f"""
        <div class="metric-card">
            <h3><span class="icon">⚡</span>Performance</h3>
            <div class="metric-value">{response_time}ms</div>
            <div class="metric-trend {perf_status}">Avg response time</div>
        </div>
        """)
        
        # Build status
        build_metrics = metrics.get('build', {})
        build_tools = len(build_metrics.get('buildTools', []))
        cards.append(f"""
        <div class="metric-card">
            <h3><span class="icon">🔨</span>Build Tools</h3>
            <div class="metric-value">{build_tools}</div>
            <div class="metric-trend trend-stable">Configured tools</div>
        </div>
        """)
        
        return '\n'.join(cards)
        
    def _generate_charts_section(self) -> str:
        """Generate charts section"""
        charts = []
        
        # Code quality chart
        charts.append("""
        <div class="chart-container">
            <h3>Code Quality Metrics</h3>
            <canvas id="codeQualityChart"></canvas>
        </div>
        """)
        
        # Performance chart
        charts.append("""
        <div class="chart-container">
            <h3>Performance Metrics</h3>
            <canvas id="performanceChart"></canvas>
        </div>
        """)
        
        # Security overview
        charts.append("""
        <div class="chart-container">
            <h3>Security Overview</h3>
            <canvas id="securityChart"></canvas>
        </div>
        """)
        
        # Test coverage breakdown
        charts.append("""
        <div class="chart-container">
            <h3>Test Coverage Breakdown</h3>
            <canvas id="testCoverageChart"></canvas>
        </div>
        """)
        
        return '\n'.join(charts)
        
    def _generate_metrics_tables(self) -> str:
        """Generate detailed metrics tables"""
        metrics = self.metrics_data.get('metrics', {})
        
        tables = ["<h3>Detailed Metrics</h3>"]
        
        # Repository overview table
        tables.append("""
        <table>
            <thead>
                <tr>
                    <th>Category</th>
                    <th>Metric</th>
                    <th>Value</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody>
        """)
        
        # Add metrics rows
        for category, category_metrics in metrics.items():
            if isinstance(category_metrics, dict):
                for metric, value in category_metrics.items():
                    status_class = self._get_metric_status_class(category, metric, value)
                    tables.append(f"""
                    <tr>
                        <td>{category.title()}</td>
                        <td>{self._format_metric_name(metric)}</td>
                        <td>{self._format_metric_value(value)}</td>
                        <td class="{status_class}">{self._get_status_text(category, metric, value)}</td>
                    </tr>
                    """)
        
        tables.append("</tbody></table>")
        
        return '\n'.join(tables)
        
    def _get_metric_status_class(self, category: str, metric: str, value: Any) -> str:
        """Determine status class for metric"""
        if category == 'security' and metric == 'vulnerabilities':
            return 'status-good' if value == 0 else 'status-error'
        elif category == 'testing' and metric == 'coverage':
            if value > 80:
                return 'status-good'
            elif value > 60:
                return 'status-warning'
            else:
                return 'status-error'
        elif category == 'performance' and metric == 'responseTime':
            if value < 200:
                return 'status-good'
            elif value < 500:
                return 'status-warning'
            else:
                return 'status-error'
        else:
            return 'status-good'
            
    def _get_status_text(self, category: str, metric: str, value: Any) -> str:
        """Get status text for metric"""
        status_class = self._get_metric_status_class(category, metric, value)
        if status_class == 'status-good':
            return 'Good'
        elif status_class == 'status-warning':
            return 'Warning'
        else:
            return 'Needs Attention'
            
    def _format_metric_name(self, name: str) -> str:
        """Format metric name for display"""
        # Convert camelCase to Title Case
        import re
        return re.sub(r'(?<!^)(?=[A-Z])', ' ', name).title()
        
    def _format_metric_value(self, value: Any) -> str:
        """Format metric value for display"""
        if isinstance(value, float):
            return f"{value:.2f}"
        elif isinstance(value, list):
            return ", ".join(str(v) for v in value)
        else:
            return str(value)
            
    def _generate_javascript(self) -> str:
        """Generate JavaScript for charts"""
        metrics = self.metrics_data.get('metrics', {})
        
        return f"""
        // Chart.js configuration
        Chart.defaults.font.family = "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif";
        Chart.defaults.plugins.legend.display = true;
        
        // Code Quality Chart
        const codeQualityCtx = document.getElementById('codeQualityChart').getContext('2d');
        new Chart(codeQualityCtx, {{
            type: 'radar',
            data: {{
                labels: ['Python Files', 'JS/TS Files', 'Total Lines', 'Pylint Score'],
                datasets: [{{
                    label: 'Code Quality',
                    data: [
                        {metrics.get('codeQuality', {}).get('pythonFiles', 0)},
                        {metrics.get('codeQuality', {}).get('jsFiles', 0)},
                        {metrics.get('codeQuality', {}).get('totalLines', 0) / 1000},
                        {metrics.get('codeQuality', {}).get('pylintScore', 0)}
                    ],
                    borderColor: '#667eea',
                    backgroundColor: 'rgba(102, 126, 234, 0.2)'
                }}]
            }},
            options: {{
                responsive: true,
                scales: {{
                    r: {{
                        beginAtZero: true
                    }}
                }}
            }}
        }});
        
        // Performance Chart
        const performanceCtx = document.getElementById('performanceChart').getContext('2d');
        new Chart(performanceCtx, {{
            type: 'bar',
            data: {{
                labels: ['Response Time (ms)', 'Throughput', 'CPU Usage (%)', 'Memory Usage (%)'],
                datasets: [{{
                    label: 'Performance Metrics',
                    data: [
                        {metrics.get('performance', {}).get('responseTime', 0)},
                        {metrics.get('performance', {}).get('throughput', 0)},
                        {metrics.get('performance', {}).get('cpuUsage', 0)},
                        {metrics.get('performance', {}).get('memoryUsage', 0)}
                    ],
                    backgroundColor: ['#4CAF50', '#2196F3', '#FF9800', '#f44336']
                }}]
            }},
            options: {{
                responsive: true,
                plugins: {{
                    legend: {{
                        display: false
                    }}
                }}
            }}
        }});
        
        // Security Chart
        const securityCtx = document.getElementById('securityChart').getContext('2d');
        new Chart(securityCtx, {{
            type: 'doughnut',
            data: {{
                labels: ['Secure', 'Vulnerabilities', 'Potential Secrets'],
                datasets: [{{
                    data: [
                        100 - {metrics.get('security', {}).get('vulnerabilities', 0)} - {metrics.get('security', {}).get('potentialSecrets', 0)},
                        {metrics.get('security', {}).get('vulnerabilities', 0)},
                        {metrics.get('security', {}).get('potentialSecrets', 0)}
                    ],
                    backgroundColor: ['#4CAF50', '#f44336', '#FF9800']
                }}]
            }},
            options: {{
                responsive: true
            }}
        }});
        
        // Test Coverage Chart
        const testCoverageCtx = document.getElementById('testCoverageChart').getContext('2d');
        new Chart(testCoverageCtx, {{
            type: 'pie',
            data: {{
                labels: ['Covered', 'Uncovered'],
                datasets: [{{
                    data: [
                        {metrics.get('testing', {}).get('coverage', 0)},
                        100 - {metrics.get('testing', {}).get('coverage', 0)}
                    ],
                    backgroundColor: ['#4CAF50', '#f44336']
                }}]
            }},
            options: {{
                responsive: true
            }}
        }});
        """
        
    def generate_dashboard(self) -> None:
        """Generate and save the dashboard"""
        logger.info("Generating HTML dashboard...")
        
        html_content = self.generate_html_dashboard()
        dashboard_file = self.output_dir / "index.html"
        
        with open(dashboard_file, 'w', encoding='utf-8') as f:
            f.write(html_content)
            
        logger.info(f"Dashboard generated: {dashboard_file}")
        
        # Generate additional files
        self._generate_json_api()
        self._generate_readme()
        
    def _generate_json_api(self) -> None:
        """Generate JSON API endpoint"""
        api_data = {
            "timestamp": self.metrics_data.get('collectionTimestamp'),
            "metrics": self.metrics_data.get('metrics', {}),
            "summary": self._generate_summary_stats()
        }
        
        api_file = self.output_dir / "api.json"
        with open(api_file, 'w', encoding='utf-8') as f:
            json.dump(api_data, f, indent=2)
            
        logger.info(f"API endpoint generated: {api_file}")
        
    def _generate_summary_stats(self) -> Dict[str, Any]:
        """Generate summary statistics"""
        metrics = self.metrics_data.get('metrics', {})
        
        return {
            "totalFiles": metrics.get('codeQuality', {}).get('pythonFiles', 0) + 
                         metrics.get('codeQuality', {}).get('jsFiles', 0),
            "testCoverage": metrics.get('testing', {}).get('coverage', 0),
            "vulnerabilities": metrics.get('security', {}).get('vulnerabilities', 0),
            "commitsThisWeek": metrics.get('git', {}).get('commitsLastWeek', 0),
            "buildTools": len(metrics.get('build', {}).get('buildTools', [])),
            "healthScore": self._calculate_health_score(metrics)
        }
        
    def _calculate_health_score(self, metrics: Dict[str, Any]) -> float:
        """Calculate overall repository health score"""
        score = 0.0
        factors = 0
        
        # Test coverage factor (0-100)
        coverage = metrics.get('testing', {}).get('coverage', 0)
        score += min(coverage, 100)
        factors += 1
        
        # Security factor (100 if no vulnerabilities, decreasing)
        vulnerabilities = metrics.get('security', {}).get('vulnerabilities', 0)
        security_score = max(0, 100 - (vulnerabilities * 10))
        score += security_score
        factors += 1
        
        # Code quality factor (based on files and pylint score)
        pylint_score = metrics.get('codeQuality', {}).get('pylintScore', 0)
        if pylint_score > 0:
            score += min(pylint_score * 10, 100)
            factors += 1
        
        return score / factors if factors > 0 else 0.0
        
    def _generate_readme(self) -> None:
        """Generate README for dashboard"""
        readme_content = f"""# Repository Dashboard

This dashboard provides an overview of the AI Hardware Co-Design Playground repository metrics.

## Files

- `index.html` - Main dashboard (open in browser)
- `api.json` - JSON API endpoint with raw metrics
- `README.md` - This file

## Last Updated

{self.metrics_data.get('collectionTimestamp', 'Unknown')}

## Usage

1. Open `index.html` in a web browser to view the interactive dashboard
2. Use `api.json` for programmatic access to metrics data

## Metrics Included

- Git activity and repository statistics
- Code quality metrics
- Test coverage and testing statistics
- Security vulnerability scans
- Performance metrics
- Build and deployment information

## Auto-generated

This dashboard is automatically generated by the repository metrics collection system.
"""
        
        readme_file = self.output_dir / "README.md"
        with open(readme_file, 'w', encoding='utf-8') as f:
            f.write(readme_content)
            
        logger.info(f"Dashboard README generated: {readme_file}")


def main():
    """Main entry point"""
    parser = argparse.ArgumentParser(
        description="Generate interactive dashboard from repository metrics"
    )
    parser.add_argument(
        "metrics_file",
        help="Path to metrics JSON file"
    )
    parser.add_argument(
        "-o", "--output",
        default="dashboard",
        help="Output directory for dashboard files (default: dashboard)"
    )
    parser.add_argument(
        "-v", "--verbose",
        action="store_true",
        help="Enable verbose logging"
    )
    
    args = parser.parse_args()
    
    if args.verbose:
        logging.getLogger().setLevel(logging.DEBUG)
        
    # Check if metrics file exists
    if not Path(args.metrics_file).exists():
        logger.error(f"Metrics file not found: {args.metrics_file}")
        sys.exit(1)
        
    # Generate dashboard
    generator = DashboardGenerator(args.metrics_file, args.output)
    generator.generate_dashboard()
    
    logger.info("Dashboard generation completed successfully!")
    logger.info(f"Open {Path(args.output) / 'index.html'} in your browser to view the dashboard")


if __name__ == "__main__":
    main()