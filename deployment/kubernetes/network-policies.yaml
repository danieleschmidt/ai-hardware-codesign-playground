---
# Default deny-all network policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-all
  namespace: codesign-production
  labels:
    security.policy: "deny-all"
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress

---
# Allow API pods to communicate with database
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: api-to-database
  namespace: codesign-production
  labels:
    security.policy: "api-database"
spec:
  podSelector:
    matchLabels:
      app: codesign-api
  policyTypes:
  - Egress
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432

---
# Allow API pods to communicate with Redis
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: api-to-redis
  namespace: codesign-production
  labels:
    security.policy: "api-redis"
spec:
  podSelector:
    matchLabels:
      app: codesign-api
  policyTypes:
  - Egress
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379

---
# Allow worker pods to communicate with database and Redis
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: worker-to-services
  namespace: codesign-production
  labels:
    security.policy: "worker-services"
spec:
  podSelector:
    matchLabels:
      app: celery-worker
  policyTypes:
  - Egress
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379

---
# Allow ingress traffic to API pods
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ingress-to-api
  namespace: codesign-production
  labels:
    security.policy: "ingress-api"
spec:
  podSelector:
    matchLabels:
      app: codesign-api
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8000

---
# Allow monitoring traffic
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: monitoring-access
  namespace: codesign-production
  labels:
    security.policy: "monitoring"
spec:
  podSelector:
    matchLabels:
      prometheus.io/scrape: "true"
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    - podSelector:
        matchLabels:
          app: prometheus
    ports:
    - protocol: TCP
      port: 9090
    - protocol: TCP
      port: 8000

---
# Allow DNS resolution
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-dns
  namespace: codesign-production
  labels:
    security.policy: "dns"
spec:
  podSelector: {}
  policyTypes:
  - Egress
  egress:
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53

---
# Allow HTTPS outbound traffic for external services
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-https-outbound
  namespace: codesign-production
  labels:
    security.policy: "https-outbound"
spec:
  podSelector:
    matchLabels:
      network.policy/external-access: "true"
  policyTypes:
  - Egress
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80

---
# Network policy for database replication
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: postgres-replication
  namespace: codesign-production
  labels:
    security.policy: "database-replication"
spec:
  podSelector:
    matchLabels:
      app: postgres
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432

---
# Network policy for Redis cluster communication
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: redis-cluster
  namespace: codesign-production
  labels:
    security.policy: "redis-cluster"
spec:
  podSelector:
    matchLabels:
      app: redis
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
    - protocol: TCP
      port: 16379  # Redis cluster bus
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
    - protocol: TCP
      port: 16379

---
# Network policy for backup service
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: backup-service-access
  namespace: codesign-production
  labels:
    security.policy: "backup-access"
spec:
  podSelector:
    matchLabels:
      app: backup-service
  policyTypes:
  - Egress
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to: []  # Allow external access for S3/cloud storage
    ports:
    - protocol: TCP
      port: 443