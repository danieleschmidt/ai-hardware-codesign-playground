---
# PostgreSQL Primary Database Deployment
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-primary
  namespace: codesign-production
  labels:
    app: postgres
    component: database
    role: primary
    tier: data
spec:
  serviceName: "postgres-primary"
  replicas: 1
  selector:
    matchLabels:
      app: postgres
      role: primary
  template:
    metadata:
      labels:
        app: postgres
        component: database
        role: primary
        tier: data
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9187"
        backup.scheduled: "true"
        monitoring.enabled: "true"
    spec:
      serviceAccountName: codesign-api-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
        seccompProfile:
          type: RuntimeDefault
      initContainers:
      - name: postgres-init
        image: postgres:15-alpine
        command:
        - sh
        - -c
        - |
          if [ ! -f /var/lib/postgresql/data/PG_VERSION ]; then
            initdb --encoding=UTF-8 --lc-collate=C --lc-ctype=C --auth-local=trust --auth-host=scram-sha-256
            echo "host replication replicator 0.0.0.0/0 scram-sha-256" >> /var/lib/postgresql/data/pg_hba.conf
          fi
        env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: codesign-secrets
              key: postgres-password
        - name: PGDATA
          value: "/var/lib/postgresql/data"
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_DB
          value: "codesign_db"
        - name: POSTGRES_USER
          value: "codesign"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: codesign-secrets
              key: postgres-password
        - name: POSTGRES_REPLICATION_USER
          value: "replicator"
        - name: POSTGRES_REPLICATION_PASSWORD
          valueFrom:
            secretKeyRef:
              name: codesign-secrets
              key: postgres-replication-password
        - name: PGDATA
          value: "/var/lib/postgresql/data"
        - name: POSTGRES_INITDB_ARGS
          value: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C --auth-local=trust --auth-host=scram-sha-256"
        command:
        - postgres
        - -c
        - config_file=/etc/postgresql/postgresql.conf
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: postgres-config
          mountPath: /etc/postgresql
        - name: postgres-secrets
          mountPath: /var/lib/postgresql/secrets
          readOnly: true
        - name: postgres-archive
          mountPath: /var/lib/postgresql/archive
        resources:
          requests:
            memory: "2Gi"
            cpu: "1"
          limits:
            memory: "4Gi"
            cpu: "2"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - codesign
            - -d
            - codesign_db
            - -h
            - localhost
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - codesign
            - -d
            - codesign_db
            - -h
            - localhost
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        startupProbe:
          exec:
            command:
            - pg_isready
            - -U
            - codesign
            - -d
            - codesign_db
            - -h
            - localhost
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
      - name: postgres-exporter
        image: prometheuscommunity/postgres-exporter:latest
        ports:
        - containerPort: 9187
          name: metrics
        env:
        - name: DATA_SOURCE_NAME
          value: "postgresql://codesign:$(POSTGRES_PASSWORD)@localhost:5432/codesign_db?sslmode=disable"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: codesign-secrets
              key: postgres-password
        - name: PG_EXPORTER_EXTEND_QUERY_PATH
          value: "/etc/postgres_exporter/queries.yaml"
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: postgres-config
        configMap:
          name: postgres-config
      - name: postgres-secrets
        secret:
          secretName: codesign-secrets
          defaultMode: 0400
      - name: postgres-archive
        emptyDir: {}
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
      labels:
        app: postgres
        component: database
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 100Gi

---
# PostgreSQL Read Replica Deployment
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-replica
  namespace: codesign-production
  labels:
    app: postgres
    component: database
    role: replica
    tier: data
spec:
  serviceName: "postgres-replica"
  replicas: 2
  selector:
    matchLabels:
      app: postgres
      role: replica
  template:
    metadata:
      labels:
        app: postgres
        component: database
        role: replica
        tier: data
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9187"
    spec:
      serviceAccountName: codesign-api-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      initContainers:
      - name: replica-setup
        image: postgres:15-alpine
        command:
        - sh
        - -c
        - |
          if [ ! -f /var/lib/postgresql/data/PG_VERSION ]; then
            echo "Setting up replica..."
            PGPASSWORD=$POSTGRES_REPLICATION_PASSWORD pg_basebackup \
              -h postgres-primary \
              -D /var/lib/postgresql/data \
              -U replicator \
              -v \
              -P \
              -W \
              -R
            echo "Replica setup complete"
          fi
        env:
        - name: POSTGRES_REPLICATION_PASSWORD
          valueFrom:
            secretKeyRef:
              name: codesign-secrets
              key: postgres-replication-password
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: codesign-secrets
              key: postgres-password
        - name: PGDATA
          value: "/var/lib/postgresql/data"
        command:
        - postgres
        - -c
        - config_file=/etc/postgresql/postgresql.conf
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: postgres-config
          mountPath: /etc/postgresql
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -h
            - localhost
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -h
            - localhost
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
      - name: postgres-exporter
        image: prometheuscommunity/postgres-exporter:latest
        ports:
        - containerPort: 9187
          name: metrics
        env:
        - name: DATA_SOURCE_NAME
          value: "postgresql://codesign:$(POSTGRES_PASSWORD)@localhost:5432/codesign_db?sslmode=disable"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: codesign-secrets
              key: postgres-password
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: postgres-config
        configMap:
          name: postgres-config
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 100Gi

---
# PostgreSQL Primary Service
apiVersion: v1
kind: Service
metadata:
  name: postgres-primary
  namespace: codesign-production
  labels:
    app: postgres
    role: primary
spec:
  selector:
    app: postgres
    role: primary
  ports:
  - port: 5432
    targetPort: 5432
    name: postgres
  - port: 9187
    targetPort: 9187
    name: metrics
  type: ClusterIP
  clusterIP: None

---
# PostgreSQL Replica Service (Read-only)
apiVersion: v1
kind: Service
metadata:
  name: postgres-replica
  namespace: codesign-production
  labels:
    app: postgres
    role: replica
spec:
  selector:
    app: postgres
    role: replica
  ports:
  - port: 5432
    targetPort: 5432
    name: postgres
  - port: 9187
    targetPort: 9187
    name: metrics
  type: ClusterIP

---
# PostgreSQL Service (Primary endpoint)
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: codesign-production
  labels:
    app: postgres
spec:
  selector:
    app: postgres
    role: primary
  ports:
  - port: 5432
    targetPort: 5432
    name: postgres
  type: ClusterIP

---
# Redis Master Deployment
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-master
  namespace: codesign-production
  labels:
    app: redis
    component: cache
    role: master
    tier: cache
spec:
  serviceName: "redis-master"
  replicas: 1
  selector:
    matchLabels:
      app: redis
      role: master
  template:
    metadata:
      labels:
        app: redis
        component: cache
        role: master
        tier: cache
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9121"
    spec:
      serviceAccountName: codesign-api-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
          name: redis
        command:
        - redis-server
        - /etc/redis/redis.conf
        - --requirepass
        - $(REDIS_PASSWORD)
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: codesign-secrets
              key: redis-password
        volumeMounts:
        - name: redis-storage
          mountPath: /data
        - name: redis-config
          mountPath: /etc/redis
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - --no-auth-warning
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - redis-cli
            - --no-auth-warning
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
      - name: redis-exporter
        image: oliver006/redis_exporter:latest
        ports:
        - containerPort: 9121
          name: metrics
        env:
        - name: REDIS_ADDR
          value: "redis://localhost:6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: codesign-secrets
              key: redis-password
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: redis-config
        configMap:
          name: redis-config
  volumeClaimTemplates:
  - metadata:
      name: redis-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 20Gi

---
# Redis Replica Deployment
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-replica
  namespace: codesign-production
  labels:
    app: redis
    component: cache
    role: replica
    tier: cache
spec:
  serviceName: "redis-replica"
  replicas: 2
  selector:
    matchLabels:
      app: redis
      role: replica
  template:
    metadata:
      labels:
        app: redis
        component: cache
        role: replica
        tier: cache
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9121"
    spec:
      serviceAccountName: codesign-api-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
          name: redis
        command:
        - redis-server
        - /etc/redis/redis.conf
        - --replicaof
        - redis-master
        - "6379"
        - --requirepass
        - $(REDIS_PASSWORD)
        - --masterauth
        - $(REDIS_PASSWORD)
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: codesign-secrets
              key: redis-password
        volumeMounts:
        - name: redis-storage
          mountPath: /data
        - name: redis-config
          mountPath: /etc/redis
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "300m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - --no-auth-warning
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - redis-cli
            - --no-auth-warning
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
      - name: redis-exporter
        image: oliver006/redis_exporter:latest
        ports:
        - containerPort: 9121
          name: metrics
        env:
        - name: REDIS_ADDR
          value: "redis://localhost:6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: codesign-secrets
              key: redis-password
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: redis-config
        configMap:
          name: redis-config
  volumeClaimTemplates:
  - metadata:
      name: redis-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 10Gi

---
# Redis Sentinel Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-sentinel
  namespace: codesign-production
  labels:
    app: redis-sentinel
    component: cache
    role: sentinel
spec:
  replicas: 3
  selector:
    matchLabels:
      app: redis-sentinel
  template:
    metadata:
      labels:
        app: redis-sentinel
        component: cache
        role: sentinel
    spec:
      serviceAccountName: codesign-api-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
      - name: sentinel
        image: redis:7-alpine
        ports:
        - containerPort: 26379
          name: sentinel
        command:
        - redis-sentinel
        - /etc/redis/sentinel.conf
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: codesign-secrets
              key: redis-password
        volumeMounts:
        - name: redis-config
          mountPath: /etc/redis
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - -p
            - "26379"
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - redis-cli
            - -p
            - "26379"
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: redis-config
        configMap:
          name: redis-config

---
# Redis Services
apiVersion: v1
kind: Service
metadata:
  name: redis-master
  namespace: codesign-production
  labels:
    app: redis
    role: master
spec:
  selector:
    app: redis
    role: master
  ports:
  - port: 6379
    targetPort: 6379
    name: redis
  - port: 9121
    targetPort: 9121
    name: metrics
  type: ClusterIP
  clusterIP: None

---
apiVersion: v1
kind: Service
metadata:
  name: redis-replica
  namespace: codesign-production
  labels:
    app: redis
    role: replica
spec:
  selector:
    app: redis
    role: replica
  ports:
  - port: 6379
    targetPort: 6379
    name: redis
  - port: 9121
    targetPort: 9121
    name: metrics
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: redis-sentinel
  namespace: codesign-production
  labels:
    app: redis-sentinel
spec:
  selector:
    app: redis-sentinel
  ports:
  - port: 26379
    targetPort: 26379
    name: sentinel
  type: ClusterIP

---
# Main Redis Service (points to sentinel for HA)
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: codesign-production
  labels:
    app: redis
spec:
  selector:
    app: redis-sentinel
  ports:
  - port: 26379
    targetPort: 26379
    name: sentinel
  type: ClusterIP