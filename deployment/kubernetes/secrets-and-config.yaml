---
# Main secrets for the application (base64 encoded values)
# Note: In production, use proper secret management tools like Vault, AWS Secrets Manager, etc.
apiVersion: v1
kind: Secret
metadata:
  name: codesign-secrets
  namespace: codesign-production
  labels:
    app: codesign-playground
    component: secrets
  annotations:
    description: "Main application secrets"
    secret-manager: "external"  # Indicates managed by external system
type: Opaque
data:
  # Database credentials (replace with actual base64 encoded values)
  postgres-password: Y29kZXNpZ25fcHJvZF9wYXNzd29yZA==  # codesign_prod_password
  postgres-replication-password: cmVwbGljYXRpb25fcGFzc3dvcmQ=  # replication_password
  
  # Redis credentials
  redis-password: cmVkaXNfcHJvZF9wYXNzd29yZA==  # redis_prod_password
  
  # Application secrets
  secret-key: c3VwZXJfc2VjcmV0X2tleV9mb3JfcHJvZHVjdGlvbg==  # super_secret_key_for_production
  jwt-secret: and0X3NlY3JldF9rZXlfZm9yX3Byb2R1Y3Rpb24=  # jwt_secret_key_for_production
  encryption-key: ZW5jcnlwdGlvbl9rZXlfMzJfYnl0ZXNfZm9yX3Byb2Q=  # encryption_key_32_bytes_for_prod
  
  # External service credentials
  sentry-dsn: aHR0cHM6Ly95b3VyLXNlbnRyeS1kc25Ac2VudHJ5LmlvL3Byb2plY3QtaWQ=  # https://your-sentry-dsn@sentry.io/project-id
  
  # Backup encryption
  backup-encryption-key: YmFja3VwX2VuY3J5cHRpb25fa2V5XzMyX2J5dGVz  # backup_encryption_key_32_bytes

---
# TLS secrets for ingress
apiVersion: v1
kind: Secret
metadata:
  name: codesign-tls
  namespace: codesign-production
  labels:
    app: codesign-playground
    component: tls
type: kubernetes.io/tls
data:
  # These will be populated by cert-manager
  tls.crt: ""
  tls.key: ""

---
# Docker registry credentials
apiVersion: v1
kind: Secret
metadata:
  name: registry-credentials
  namespace: codesign-production
  labels:
    app: codesign-playground
    component: registry
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: eyJhdXRocyI6e319  # Empty for now, replace with actual credentials

---
# AWS credentials for backup (if using S3)
apiVersion: v1
kind: Secret
metadata:
  name: aws-credentials
  namespace: codesign-production
  labels:
    app: codesign-playground
    component: backup
type: Opaque
data:
  access-key-id: WU9VUl9BV1NfQUNDRVNTX0tFWV9JRA==  # YOUR_AWS_ACCESS_KEY_ID
  secret-access-key: WU9VUl9BV1NfU0VDUkVUX0FDQ0VTU19LRVk=  # YOUR_AWS_SECRET_ACCESS_KEY

---
# Main application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: codesign-config
  namespace: codesign-production
  labels:
    app: codesign-playground
    component: config
  annotations:
    description: "Main application configuration"
data:
  # Environment settings
  environment: "production"
  log-level: "INFO"
  debug: "false"
  
  # Performance settings
  max-workers: "4"
  worker-timeout: "120"
  worker-keepalive: "5"
  max-requests: "10000"
  max-requests-jitter: "1000"
  
  # Scaling configuration
  scaling-mode: "balanced"
  cache-size-mb: "512"
  
  # Database configuration
  database-pool-size: "20"
  database-max-overflow: "30"
  database-pool-timeout: "30"
  
  # Redis configuration
  redis-cluster-mode: "sentinel"
  redis-sentinel-service-name: "mymaster"
  redis-pool-size: "20"
  
  # Security settings
  security-hardened: "true"
  enable-rate-limiting: "true"
  rate-limit-per-minute: "100"
  enable-request-validation: "strict"
  max-request-size: "100MB"
  enable-security-headers: "true"
  
  # Compliance settings
  compliance-region: "global"
  gdpr-enabled: "true"
  ccpa-enabled: "true"
  pdpa-enabled: "true"
  audit-logging-enabled: "true"
  data-retention-days: "2555"
  
  # Monitoring settings
  enable-monitoring: "true"
  enable-metrics: "true"
  enable-tracing: "true"
  enable-apm: "true"
  metrics-port: "9090"
  
  # Feature flags
  enable-circuit-breaker: "true"
  enable-health-checks: "true"
  enable-backup: "true"
  enable-edge-caching: "true"
  enable-compression: "true"
  
  # High availability settings
  enable-ha: "true"
  ha-mode: "active-active"
  failover-enabled: "true"
  health-check-interval: "30"

---
# PostgreSQL configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: codesign-production
  labels:
    app: postgres
    component: database
data:
  postgresql.conf: |
    # PostgreSQL configuration for production
    
    # Connection settings
    listen_addresses = '*'
    port = 5432
    max_connections = 200
    
    # Memory settings
    shared_buffers = 512MB
    effective_cache_size = 2GB
    maintenance_work_mem = 128MB
    work_mem = 4MB
    
    # WAL settings
    wal_level = replica
    max_wal_size = 2GB
    min_wal_size = 100MB
    wal_buffers = 32MB
    archive_mode = on
    archive_command = 'cp %p /var/lib/postgresql/archive/%f'
    
    # Replication settings
    max_wal_senders = 3
    max_replication_slots = 3
    hot_standby = on
    hot_standby_feedback = on
    
    # Checkpoint settings
    checkpoint_completion_target = 0.9
    checkpoint_timeout = 15min
    
    # Query planner settings
    random_page_cost = 1.1
    effective_io_concurrency = 200
    default_statistics_target = 100
    
    # Logging settings
    log_destination = 'stderr'
    logging_collector = on
    log_directory = 'log'
    log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
    log_truncate_on_rotation = on
    log_rotation_age = 1d
    log_rotation_size = 100MB
    log_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
    log_checkpoints = on
    log_connections = on
    log_disconnections = on
    log_lock_waits = on
    log_temp_files = 0
    log_autovacuum_min_duration = 0
    log_error_verbosity = default
    
    # Performance monitoring
    shared_preload_libraries = 'pg_stat_statements'
    track_activities = on
    track_counts = on
    track_io_timing = on
    track_functions = all
    
    # Security settings
    ssl = on
    ssl_cert_file = '/var/lib/postgresql/server.crt'
    ssl_key_file = '/var/lib/postgresql/server.key'
    ssl_ca_file = '/var/lib/postgresql/ca.crt'
    password_encryption = scram-sha-256
    
  pg_hba.conf: |
    # PostgreSQL Client Authentication Configuration
    
    # TYPE  DATABASE        USER            ADDRESS                 METHOD
    
    # "local" is for Unix domain socket connections only
    local   all             all                                     trust
    
    # IPv4 local connections:
    host    all             all             127.0.0.1/32            scram-sha-256
    
    # IPv6 local connections:
    host    all             all             ::1/128                 scram-sha-256
    
    # Allow replication connections from localhost
    host    replication     replicator      127.0.0.1/32            scram-sha-256
    host    replication     replicator      ::1/128                 scram-sha-256
    
    # Allow connections from pod network
    host    all             all             10.244.0.0/16           scram-sha-256
    host    all             all             172.20.0.0/16           scram-sha-256
    
    # Allow replication from pod network
    host    replication     replicator      10.244.0.0/16           scram-sha-256
    host    replication     replicator      172.20.0.0/16           scram-sha-256

---
# Redis configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
  namespace: codesign-production
  labels:
    app: redis
    component: cache
data:
  redis.conf: |
    # Redis configuration for production
    
    # Network settings
    bind 0.0.0.0
    port 6379
    tcp-backlog 511
    tcp-keepalive 300
    timeout 0
    
    # General settings
    databases 16
    save 900 1
    save 300 10
    save 60 10000
    stop-writes-on-bgsave-error yes
    rdbcompression yes
    rdbchecksum yes
    
    # Memory management
    maxmemory 1gb
    maxmemory-policy allkeys-lru
    
    # Append only file
    appendonly yes
    appendfilename "appendonly.aof"
    appendfsync everysec
    no-appendfsync-on-rewrite no
    auto-aof-rewrite-percentage 100
    auto-aof-rewrite-min-size 64mb
    
    # Logging
    loglevel notice
    logfile ""
    
    # Security
    # requirepass will be set via environment variable
    
    # Slow log
    slowlog-log-slower-than 10000
    slowlog-max-len 128
    
    # Client settings
    maxclients 10000
    
  sentinel.conf: |
    # Redis Sentinel configuration
    
    port 26379
    sentinel monitor mymaster redis-master 6379 2
    sentinel down-after-milliseconds mymaster 5000
    sentinel parallel-syncs mymaster 1
    sentinel failover-timeout mymaster 10000
    sentinel deny-scripts-reconfig yes
    
    # Authentication (will be set via environment)
    # sentinel auth-pass mymaster password

---
# Celery configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: celery-config
  namespace: codesign-production
  labels:
    app: celery-worker
    component: worker
data:
  celery-routes.json: |
    {
      "codesign_playground.tasks.accelerator_design": {
        "queue": "accelerator_queue",
        "routing_key": "accelerator.design"
      },
      "codesign_playground.tasks.model_optimization": {
        "queue": "optimization_queue",
        "routing_key": "model.optimize"
      },
      "codesign_playground.tasks.compliance_audit": {
        "queue": "compliance_queue",
        "routing_key": "compliance.audit"
      },
      "codesign_playground.tasks.backup_data": {
        "queue": "backup_queue",
        "routing_key": "backup.data"
      }
    }
  
  worker-config.py: |
    # Celery worker configuration
    
    # Broker settings
    broker_url = 'redis://:password@redis-sentinel:26379'
    result_backend = 'redis://:password@redis-sentinel:26379'
    
    # Task settings
    task_serializer = 'json'
    accept_content = ['json']
    result_serializer = 'json'
    timezone = 'UTC'
    enable_utc = True
    
    # Worker settings
    worker_prefetch_multiplier = 1
    task_acks_late = True
    task_reject_on_worker_lost = True
    
    # Result backend settings
    result_expires = 3600
    result_backend_always_retry = True
    
    # Task routing
    task_routes = {
        'codesign_playground.tasks.accelerator_design': {'queue': 'accelerator_queue'},
        'codesign_playground.tasks.model_optimization': {'queue': 'optimization_queue'},
        'codesign_playground.tasks.compliance_audit': {'queue': 'compliance_queue'},
        'codesign_playground.tasks.backup_data': {'queue': 'backup_queue'},
    }
    
    # Monitoring
    worker_send_task_events = True
    task_send_sent_event = True

---
# Monitoring configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: monitoring-config
  namespace: codesign-production
  labels:
    app: monitoring
    component: observability
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: 'codesign-production'
        environment: 'production'
    
    rule_files:
      - "/etc/prometheus/rules/*.yml"
    
    scrape_configs:
      - job_name: 'codesign-api'
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
                - codesign-production
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_label_app]
            action: keep
            regex: codesign-api
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            target_label: __address__
            regex: (.+)
            replacement: ${1}:9090
    
      - job_name: 'celery-worker'
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
                - codesign-production
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_label_app]
            action: keep
            regex: celery-worker
    
      - job_name: 'postgres'
        static_configs:
          - targets: ['postgres:5432']
    
      - job_name: 'redis'
        static_configs:
          - targets: ['redis:6379']