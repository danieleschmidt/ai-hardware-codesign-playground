[build-system]
requires = ["setuptools>=61.0", "wheel", "pybind11>=2.10.0"]
build-backend = "setuptools.build_meta"

[project]
name = "ai-hardware-codesign-playground"
version = "0.1.0"
description = "Interactive environment for co-optimizing neural networks and hardware accelerators"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Daniel Schmidt", email = "daniel@terragon.ai"},
    {name = "AI Hardware Co-Design Community", email = "community@codesign-playground.com"},
]
maintainers = [
    {name = "Daniel Schmidt", email = "daniel@terragon.ai"},
]
keywords = [
    "ai", "hardware", "accelerators", "neural-networks", "fpga", "asic", 
    "co-design", "optimization", "rtl", "verilog", "machine-learning",
    "deep-learning", "compiler", "synthesis", "simulation"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Electronic Design Automation (EDA)",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Software Development :: Compilers",
]
requires-python = ">=3.9"
dependencies = [
    # Core dependencies
    "numpy>=1.21.0",
    "scipy>=1.7.0",
    "pandas>=1.3.0",
    "matplotlib>=3.5.0",
    "plotly>=5.0.0",
    "seaborn>=0.11.0",
    
    # ML frameworks
    "torch>=1.12.0",
    "torchvision>=0.13.0",
    "tensorflow>=2.8.0",
    "onnx>=1.12.0",
    "onnxruntime>=1.12.0",
    
    # Hardware and simulation
    "pybind11>=2.10.0",
    "networkx>=2.6.0",
    "graphviz>=0.20.0",
    
    # Web framework
    "fastapi>=0.95.0",
    "uvicorn[standard]>=0.20.0",
    "pydantic>=2.0.0",
    "jinja2>=3.1.0",
    
    # Database and caching
    "sqlalchemy>=2.0.0",
    "alembic>=1.8.0",
    "redis>=4.3.0",
    
    # Distributed computing
    "ray[default]>=2.0.0",
    
    # CLI and utilities
    "click>=8.1.0",
    "typer>=0.7.0",
    "rich>=13.0.0",
    "tqdm>=4.64.0",
    "pyyaml>=6.0.0",
    "toml>=0.10.0",
    
    # Jupyter integration
    "jupyter>=1.0.0",
    "ipywidgets>=8.0.0",
    "ipykernel>=6.15.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "pytest-mock>=3.8.0",
    "hypothesis>=6.54.0",
    "black>=23.0.0",
    "mypy>=1.0.0",
    "ruff>=0.1.0",
    "pre-commit>=3.0.0",
    "ipdb>=0.13.0",
    "memory-profiler>=0.60.0",
    "line-profiler>=4.0.0",
    "py-spy>=0.3.0",
    "snakeviz>=2.1.0",
    "scalene>=1.5.0",
]

test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "pytest-mock>=3.8.0",
    "pytest-asyncio>=0.21.0",
    "pytest-benchmark>=4.0.0",
    "hypothesis>=6.54.0",
    "factory-boy>=3.2.0",
    "faker>=18.0.0",
]

docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "sphinx-autodoc-typehints>=1.19.0",
    "myst-parser>=1.0.0",
    "mkdocs>=1.4.0",
    "mkdocs-material>=9.0.0",
    "mkdocs-jupyter>=0.24.0",
    "mkdocstrings[python]>=0.22.0",
]

fpga = [
    "vivado-utils>=0.1.0; platform_system=='Linux'",
    "quartus-utils>=0.1.0; platform_system=='Linux'",
]

cloud = [
    "boto3>=1.26.0",
    "google-cloud-storage>=2.8.0",
    "azure-storage-blob>=12.14.0",
    "kubernetes>=25.0.0",
]

all = [
    "ai-hardware-codesign-playground[dev,test,docs,fpga,cloud]",
]

[project.urls]
Homepage = "https://github.com/terragon-labs/ai-hardware-codesign-playground"
Documentation = "https://docs.codesign-playground.com"
Repository = "https://github.com/terragon-labs/ai-hardware-codesign-playground"
Issues = "https://github.com/terragon-labs/ai-hardware-codesign-playground/issues"
Changelog = "https://github.com/terragon-labs/ai-hardware-codesign-playground/blob/main/CHANGELOG.md"
Discussions = "https://github.com/terragon-labs/ai-hardware-codesign-playground/discussions"

[project.scripts]
codesign-playground = "codesign_playground.cli:main"
codesign-verify = "codesign_playground.tools.verify:main"
codesign-benchmark = "codesign_playground.tools.benchmark:main"

[project.entry-points."codesign_playground.backends"]
systolic_array = "codesign_playground.backends.systolic:SystolicArrayBackend"
vector_processor = "codesign_playground.backends.vector:VectorProcessorBackend"
dataflow = "codesign_playground.backends.dataflow:DataflowBackend"

[project.entry-points."codesign_playground.optimizers"]
genetic = "codesign_playground.optimizers.genetic:GeneticOptimizer"
bayesian = "codesign_playground.optimizers.bayesian:BayesianOptimizer"
gradient = "codesign_playground.optimizers.gradient:GradientOptimizer"

[project.entry-points."codesign_playground.simulators"]
verilator = "codesign_playground.simulators.verilator:VerilatorSimulator"
analytical = "codesign_playground.simulators.analytical:AnalyticalSimulator"
hybrid = "codesign_playground.simulators.hybrid:HybridSimulator"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"codesign_playground" = [
    "templates/**/*.v",
    "templates/**/*.sv", 
    "templates/**/*.vhd",
    "templates/**/*.yml",
    "templates/**/*.yaml",
    "templates/**/*.json",
    "data/**/*.json",
    "data/**/*.csv",
    "web/static/**/*",
    "web/templates/**/*",
]

# =============================================================================
# DEVELOPMENT TOOLS CONFIGURATION
# =============================================================================

[tool.black]
line-length = 88
target-version = ["py39", "py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | venv
)/
'''

[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
    "A",   # flake8-builtins
    "T20", # flake8-print
    "SIM", # flake8-simplify
    "LOG", # flake8-logging
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",   # line too long, handled by black
    "B008",   # do not perform function calls in argument defaults
    "C901",   # too complex
    "B904",   # raise from
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*.py" = ["T20", "A"]

[tool.ruff.isort]
known-first-party = ["codesign_playground"]
known-third-party = ["torch", "tensorflow", "onnx", "ray", "fastapi"]

[tool.mypy]
python_version = "3.9"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "ray.*",
    "tensorflow.*",
    "torch.*",
    "onnx.*",
    "verilator.*",
    "yosys.*",
    "plotly.*",
    "graphviz.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config", 
    "--cov=src/codesign_playground",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
    "gpu: marks tests that require GPU",
    "fpga: marks tests that require FPGA tools",
    "cloud: marks tests that require cloud resources",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/conftest.py",
    "*/setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

# =============================================================================
# SEMANTIC RELEASE CONFIGURATION
# =============================================================================

[tool.semantic_release]
version_toml = ["pyproject.toml:project.version"]
branch = "main"
upload_to_PyPI = false
upload_to_release = true
build_command = "pip install build && python -m build"
remove_dist = false

[tool.semantic_release.changelog]
template_dir = "templates"
changelog_file = "CHANGELOG.md"

[tool.semantic_release.changelog.environment]
block_start_string = "{%"
block_end_string = "%}"
variable_start_string = "{{"
variable_end_string = "}}"
comment_start_string = "{#"
comment_end_string = "#}"
trim_blocks = false
lstrip_blocks = false

[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.branches.develop]
match = "develop"
prerelease_token = "dev"
prerelease = true

# =============================================================================
# BANDIT SECURITY CONFIGURATION
# =============================================================================

[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
tests = ["B201", "B301"]
skips = ["B101", "B601"]