[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ai-hardware-codesign-playground"
version = "0.1.0"
description = "Interactive environment for co-optimizing neural networks and hardware accelerators"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Terragon Labs", email = "contact@terragon-labs.com"},
]
maintainers = [
    {name = "Daniel Schmidt", email = "daniel@terragon-labs.com"},
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: System :: Hardware",
]
keywords = [
    "ai", "machine-learning", "hardware-design", "accelerators", 
    "rtl", "fpga", "asic", "co-design", "optimization", "neural-networks"
]
requires-python = ">=3.9"
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.0.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",
    "psycopg2-binary>=2.9.0",
    "redis>=5.0.0",
    "celery>=5.3.0",
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "matplotlib>=3.7.0",
    "plotly>=5.17.0",
    "networkx>=3.1.0",
    "pyyaml>=6.0.0",
    "jinja2>=3.1.0",
    "click>=8.1.0",
    "rich>=13.6.0",
    "typer>=0.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "pytest-xdist>=3.3.0",
    "pytest-benchmark>=4.0.0",
    "hypothesis>=6.88.0",
    "black>=23.9.0",
    "isort>=5.12.0",
    "ruff>=0.1.0",
    "mypy>=1.6.0",
    "pylint>=3.0.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",
    "pre-commit>=3.5.0",
    "commitizen>=3.10.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "pytest-xdist>=3.3.0",
    "pytest-benchmark>=4.0.0",
    "hypothesis>=6.88.0",
    "factory-boy>=3.3.0",
    "freezegun>=1.2.0",
    "responses>=0.23.0",
]
docs = [
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-autodoc-typehints>=1.24.0",
    "myst-parser>=2.0.0",
    "sphinx-copybutton>=0.5.2",
    "sphinx-autoapi>=3.0.0",
]
ml = [
    "torch>=2.1.0",
    "torchvision>=0.16.0",
    "tensorflow>=2.14.0",
    "onnx>=1.15.0",
    "onnxruntime>=1.16.0",
    "transformers>=4.35.0",
    "accelerate>=0.24.0",
    "datasets>=2.14.0",
]
hardware = [
    "cocotb>=1.8.0",
    "cocotb-test>=0.2.4",
    "pyverilog>=1.3.0",
    "nmigen>=0.3",
    "amaranth>=0.4.0",
    "litex>=2023.8",
]
cloud = [
    "boto3>=1.29.0",
    "azure-storage-blob>=12.19.0",
    "google-cloud-storage>=2.10.0",
    "kubernetes>=28.1.0",
    "docker>=6.1.0",
]
all = [
    "ai-hardware-codesign-playground[dev,test,docs,ml,hardware,cloud]"
]

[project.urls]
Homepage = "https://github.com/terragon-labs/ai-hardware-codesign-playground"
Documentation = "https://docs.terragon-labs.com/ai-hardware-codesign-playground"
Repository = "https://github.com/terragon-labs/ai-hardware-codesign-playground.git"
Issues = "https://github.com/terragon-labs/ai-hardware-codesign-playground/issues"
Changelog = "https://github.com/terragon-labs/ai-hardware-codesign-playground/blob/main/CHANGELOG.md"

[project.scripts]
codesign-playground = "codesign_playground.cli:main"
codesign-server = "codesign_playground.server:main"
codesign-worker = "codesign_playground.worker:main"

[tool.setuptools.packages.find]
where = ["backend"]
include = ["codesign_playground*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
codesign_playground = ["templates/**/*", "static/**/*", "schemas/**/*"]

# Testing Configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --disable-warnings"
testpaths = ["tests", "backend/tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
    "benchmark: marks tests as benchmarks",
    "hardware: marks tests requiring hardware simulation",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["backend/codesign_playground"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Code Quality Tools
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | migrations
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["codesign_playground"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
force_alphabetical_sort_within_sections = true

[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused-function-argument
    "SIM118", # in-dict-keys
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
unfixable = ["F841"]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["ARG001", "S101"]

[tool.mypy]
python_version = "3.9"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.pylint.messages_control]
max-line-length = 88
disable = [
    "missing-docstring",
    "too-few-public-methods",
    "too-many-arguments",
    "too-many-instance-attributes",
    "too-many-locals",
    "too-many-branches",
    "duplicate-code",
]

[tool.bandit]
exclude_dirs = ["tests", "test_*"]
skips = ["B101", "B601"]

[tool.commitizen]
version = "0.1.0"
version_files = [
    "pyproject.toml:version",
    "package.json:version",
    "backend/codesign_playground/__init__.py:__version__",
]
style = [
    ["qmark", "fg:#ff9d00 bold"],
    ["question", "bold"],
    ["answer", "fg:#ff9d00 bold"],
    ["pointer", "fg:#ff9d00 bold"],
    ["highlighted", "fg:#ff9d00 bold"],
    ["selected", "fg:#cc5454"],
    ["separator", "fg:#cc5454"],
    ["instruction", ""],
    ["text", ""],
    ["disabled", "fg:#858585 italic"]
]