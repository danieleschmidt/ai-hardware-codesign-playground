[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ai-hardware-codesign-playground"
version = "0.1.0"
description = "Interactive environment for co-optimizing neural networks and hardware accelerators"
authors = [
    {name = "Terragon Labs", email = "contact@terragon-labs.com"},
]
maintainers = [
    {name = "Daniel Schmidt", email = "daniel@terragon-labs.com"},
]
readme = "README.md"
license = {text = "MIT"}
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Code Generators",
    "Topic :: System :: Hardware",
]
keywords = [
    "ai", "machine-learning", "hardware-design", "accelerators", "rtl", 
    "fpga", "asic", "co-design", "optimization", "neural-networks", "tvm", "mlir"
]
requires-python = ">=3.9"
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.13.0",
    "asyncpg>=0.29.0",
    "redis>=5.0.0",
    "celery>=5.3.0",
    "numpy>=1.24.0",
    "scipy>=1.11.0",
    "pandas>=2.1.0",
    "matplotlib>=3.7.0",
    "plotly>=5.17.0",
    "jupyter>=1.0.0",
    "jupyterlab>=4.0.0",
    "requests>=2.31.0",
    "aiohttp>=3.9.0",
    "pyyaml>=6.0",
    "jinja2>=3.1.0",
    "click>=8.1.0",
    "rich>=13.7.0",
    "typer>=0.9.0",
    "httpx>=0.25.0",
    "websockets>=12.0",
    "python-multipart>=0.0.6",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "prometheus-client>=0.19.0",
    "structlog>=23.2.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-xdist>=3.5.0",
    "pytest-timeout>=2.2.0",
    "pytest-benchmark>=4.0.0",
    "hypothesis>=6.92.0",
    "factory-boy>=3.3.0",
    "faker>=20.1.0",
    "httpx>=0.25.0",
    
    # Code Quality
    "black>=23.12.0",
    "isort>=5.13.0",
    "flake8>=6.1.0",
    "pylint>=3.0.0",
    "mypy>=1.8.0",
    "bandit>=1.7.5",
    "safety>=2.3.0",
    "pre-commit>=3.6.0",
    
    # Development Tools
    "ipython>=8.18.0",
    "ipdb>=0.13.13",
    "watchdog>=3.0.0",
    "python-dotenv>=1.0.0",
    "coverage[toml]>=7.3.0",
]

test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-xdist>=3.5.0",
    "pytest-timeout>=2.2.0",
    "pytest-benchmark>=4.0.0",
    "hypothesis>=6.92.0",
    "factory-boy>=3.3.0",
    "faker>=20.1.0",
    "httpx>=0.25.0",
]

docs = [
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-autodoc-typehints>=1.25.0",
    "myst-parser>=2.0.0",
    "sphinx-copybutton>=0.5.2",
    "sphinxcontrib-mermaid>=0.9.2",
    "sphinx-autobuild>=2021.3.14",
    "nbsphinx>=0.9.3",
]

ml = [
    "torch>=2.1.0",
    "torchvision>=0.16.0",
    "tensorflow>=2.15.0",
    "onnx>=1.15.0",
    "onnxruntime>=1.16.0",
    "transformers>=4.36.0",
    "datasets>=2.15.0",
    "scikit-learn>=1.3.0",
    "xgboost>=2.0.0",
    "optuna>=3.5.0",
    "tensorboard>=2.15.0",
]

hardware = [
    "cocotb>=1.8.0",
    "pyrtl>=0.11.0",
    "amaranth>=0.4.0",
    "migen>=0.9.2",
    "pyverilog>=1.3.0",
]

cloud = [
    "boto3>=1.34.0",
    "azure-storage-blob>=12.19.0",
    "google-cloud-storage>=2.10.0",
    "kubernetes>=28.1.0",
    "docker>=6.1.0",
]

full = [
    "ai-hardware-codesign-playground[dev,test,docs,ml,hardware,cloud]",
]

[project.urls]
Homepage = "https://github.com/terragon-labs/ai-hardware-codesign-playground"
Documentation = "https://docs.terragon-labs.com/ai-hardware-codesign-playground"
Repository = "https://github.com/terragon-labs/ai-hardware-codesign-playground.git"
"Bug Tracker" = "https://github.com/terragon-labs/ai-hardware-codesign-playground/issues"
Changelog = "https://github.com/terragon-labs/ai-hardware-codesign-playground/blob/main/CHANGELOG.md"
"Funding" = "https://github.com/sponsors/terragon-labs"

[project.scripts]
codesign-playground = "codesign_playground.cli:main"

[tool.setuptools.packages.find]
where = ["backend/src"]

[tool.setuptools.package-data]
"codesign_playground" = ["py.typed", "templates/**/*", "schemas/**/*"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | migrations
  )/
)
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["codesign_playground"]
known_third_party = [
    "fastapi", "pydantic", "sqlalchemy", "alembic", "redis", "celery",
    "numpy", "pandas", "matplotlib", "plotly", "torch", "tensorflow",
    "onnx", "transformers", "click", "typer", "rich", "structlog"
]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
skip = [".venv", "venv", "migrations", "build", "dist"]

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_error_context = true
pretty = true
ignore_missing_imports = true
namespace_packages = true
explicit_package_bases = true

[[tool.mypy.overrides]]
module = [
    "tests.*",
    "conftest",
]
ignore_errors = true
disallow_untyped_defs = false

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=codesign_playground",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-fail-under=80",
    "--timeout=300",
]
testpaths = ["backend/tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m "not slow"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
    "performance: marks tests as performance tests",
    "gpu: marks tests that require GPU",
    "hardware: marks tests that require hardware simulation tools",
    "cloud: marks tests that require cloud services",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
xfail_strict = true

# Coverage configuration
[tool.coverage.run]
source = ["backend/src"]
branch = true
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__init__.py",
    "*/conftest.py",
    "*/settings/*",
    "*/manage.py",
    "*/wsgi.py",
    "*/asgi.py",
]

[tool.coverage.report]
precision = 2
skip_covered = true
skip_empty = true
sort = "Cover"
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\):",
    "@(abc\.)?abstractmethod",
    "TYPE_CHECKING",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# Pylint configuration
[tool.pylint.main]
jobs = 0
persistent = true
safe-imports = true

[tool.pylint.messages_control]
disable = [
    "C0111",  # missing-docstring
    "C0103",  # invalid-name
    "R0903",  # too-few-public-methods
    "R0913",  # too-many-arguments
    "W0511",  # fixme
]

[tool.pylint.format]
max-line-length = 88

[tool.pylint.design]
max-args = 10
max-attributes = 15
max-branches = 15
max-locals = 20
max-parents = 10
max-public-methods = 25
max-returns = 8
max-statements = 60

# Bandit configuration
[tool.bandit]
exclude_dirs = ["tests", "migrations"]
skips = ["B101", "B601"]

# Ruff configuration (alternative to flake8)
[tool.ruff]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "PD", # pandas-vet
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
fixable = ["ALL"]
unfixable = []
line-length = 88
target-version = "py39"

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["PD", "S101", "S106"]

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.isort]
known-first-party = ["codesign_playground"]

# Sphinx configuration for documentation
[tool.sphinx]
source-dir = "docs"
build-dir = "docs/_build"
all_files = 1
freshenv = 1
warningiserror = 1
keep-going = 1